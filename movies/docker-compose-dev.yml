---
version : '3.9'

services:
  external_dev:  # External API for development
    extends:
      file: docker-compose-base.yml
      service: external
    build:
      context: ./external
      args:
        REQUIREMENTS_DEV: true
    depends_on:
      elastic:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DEBUG: true
    ports:
    - "8888:8000"
    volumes:
    -   ./external/src:/src
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    logging:
      driver: gelf
      options:
        gelf-address: "udp://127.0.0.1:5044"
        tag: apps

  auth_dev:  # auth API for development
    extends:
      file: docker-compose-base.yml
      service: auth
    build:
      context: ./auth
      args:
        REQUIREMENTS_DEV: true
    environment:
      DEBUG: true
      FORWARDED_ALLOW_IPS: '*'
    depends_on:
      redis_auth:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
    - "8000:8000"
    volumes:
    -   ./auth/src:/src
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    logging:
      driver: gelf
      options:
        gelf-address: "udp://127.0.0.1:5044"
        tag: apps

  admin_dev:  # Admin for development
    extends:
      file: docker-compose-base.yml
      service: admin
    build:
      context: ./admin
      args:
        REQUIREMENTS_DEV: true
    environment:
      DEBUG: true
      SERVICE_AUTH_API_BASE_PATH: http://auth_dev:8000/api/v1
    ports:
    - "8080:8000"    # Торчит наружу только при запущенном dev-сервере, на проде торчать не будет
    volumes:
    -   ./admin:/src/app
    -   admin_data:/src/app/data
    depends_on:
      postgres:
        condition: service_healthy
    command: sh -c "python ./manage.py migrate && python ./manage.py runserver 0.0.0.0:8000"
    logging:
      driver: gelf
      options:
        gelf-address: "udp://127.0.0.1:5044"
        tag: apps

  ratings_dev: # Ratings API for development
    extends:
      file: docker-compose-base.yml
      service: ratings
    build:
      context: ./ratings
      args:
        REQUIREMENTS_DEV: true
    depends_on:
      elastic:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DEBUG: true
    ports:
      - "8082:8080"
    volumes:
      - ./ratings/src:/src
    command: uvicorn main:app --host 0.0.0.0 --port 8080 --reload
    logging:
      driver: gelf
      options:
        gelf-address: "udp://127.0.0.1:5044"
        tag: apps

  notification_dev: # Ratings API for development
    extends:
      file: docker-compose-base.yml
      service: notification
    build:
      context: ./notification
      args:
        REQUIREMENTS_DEV: true
    environment:
      DEBUG: true
    ports:
      - "8000:8080"
    volumes:
      - ./notification/src:/src
    command: uvicorn main:app --host 0.0.0.0 --port 8080 --reload

  etl:
    extends:
      file: docker-compose-base.yml
      service: etl
    depends_on:
      postgres:
        condition: service_healthy
      elastic:
        condition: service_healthy
      redis:
        condition: service_healthy
    logging:
      driver: gelf
      options:
        gelf-address: "udp://127.0.0.1:5044"
        tag: apps

  postgres:
    extends:
      file: docker-compose-base.yml
      service: postgres
    ports:
    - "5432:5432"

  elastic:
    extends:
      file: docker-compose-base.yml
      service: elastic

  redis:
    extends:
      file: docker-compose-base.yml
      service: redis

  redis_auth:
    extends:
      file: docker-compose-base.yml
      service: redis_auth

  jaeger:
    extends:
      file: docker-compose-base.yml
      service: jaeger
    profiles: [auth_dev, external_dev, tests, notification_dev]

  mongo:
    container_name: mongo
    image: mongo
    volumes:
      - mongo_db:/data/db
    ports:
      - "27017:27017"
    profiles: [ ratings_dev, tests, notification_dev ]

  elasticsearch-logs:
    extends:
      file: docker-compose-base.yml
      service: elasticsearch-logs

  logstash:
    extends:
      file: docker-compose-base.yml
      service: logstash
    depends_on:
      elasticsearch-logs:
        condition: service_healthy

  kibana:
    extends:
      file: docker-compose-base.yml
      service: kibana
    depends_on:
      elasticsearch-logs:
        condition: service_healthy

  filebeat:
    extends:
      file: docker-compose-base.yml
      service: filebeat
    depends_on:
      - kibana
      - logstash


volumes :
  postgres_db:
  es_data:
  redis_data:
  admin_data:
  mongo_db:
  es_logs_data:
  filebeat_data:
